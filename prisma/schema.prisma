generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  stripe_customer_id String?             @unique @db.VarChar
  display_name       String?             @db.VarChar
  subscription_id    String?
  todo               Todo[]
  calls              Call[]
  subscription       Subscription?       @relation(fields: [subscription_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  knowledgeDatasets  KnowledgeDataset[]
  customerCallLists  CustomerCallList[]  // Add this line to create the opposite relation

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Subscription {
  id               String    @id @unique
  price_id         String
  status           String
  period_ends_at   DateTime? @db.Timestamp(6)
  user             User[]

  @@map(name: "subscriptions")
}

model Call {
  id           String   @id @default(cuid())
  customerName String
  recording    String
  transcript   String
  dateTime     DateTime
  duration     Int
  todoId       Int
  todo         Todo     @relation(fields: [todoId], references: [id])
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Todo {
  id                    Int                    @id @default(autoincrement())
  name                  String
  task                  String
  transferPhoneNumber   String
  aiVoice               String
  model                 String                 @default("default_model")
  language              String                 @default("en")
  voiceSettings         Json                   @default("{}")
  localDialing          Boolean                @default(false)
  maxDuration           Int                    @default(12)
  answeredByEnabled     Boolean                @default(false)
  waitForGreeting       Boolean                @default(false)
  record                Boolean                @default(false)
  amd                   Boolean                @default(false)
  interruptionThreshold Int                    @default(100)
  voicemailMessage      String?                @default("")
  temperature           Float?                 @default(0.7)
  transferList          Json                   @default("{}")
  metadata              Json                   @default("{}")
  pronunciationGuide    Json                   @default("[]")
  startTime             DateTime?
  requestData           Json                   @default("{}")
  tools                 Json                   @default("[]")
  webhook               String?                @default("")
  calendly              Json                   @default("{}")
  scheduleTime          DateTime
  isActive              Boolean
  user_id               String?
  author                String?
  user                  User?                  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  datasets              KnowledgeDataset[]     @relation("TodoDatasets")
  calls                 Call[]
}

model KnowledgeDataset {
  id       String        @id @default(cuid())
  title    String
  type     String
  content  String        @db.Text
  userId   String
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos    Todo[]        @relation("TodoDatasets")
}

model CustomerCallList {
  id        String   @id @default(cuid())
  name      String
  phone     String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
